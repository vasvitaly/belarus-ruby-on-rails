---
- name: Authorize current user
  authorized_key: user={{ user_name }} key='{{ lookup('file', '~/.ssh/id_rsa.pub') }}'

- name: Create rails_env.sh
  template: src=rails_env.sh.j2 dest={{ profile_d_path }}/rails_env.sh owner={{ user_name }} group={{ group_name }}

- name: Allow to start / stop app with sudo
  template: src=sudoers.d.conf.j2 dest=/etc/sudoers.d/{{ app_name }} validate='visudo -cf %s'

- name: Create directories
  file: path={{ item }} state=directory owner={{ user_name }} group={{ group_name }}
  with_items:
    - '{{ path }}'
    - '{{ releases_path }}'
    - '{{ shared_path }}'
    - '{{ shared_path }}/tmp'
    - '{{ shared_path }}/public'
    - '{{ shared_path }}/log'
    - '{{ shared_path }}/config'
    - '{{ shared_path }}/vendor'
    - '{{ shared_path }}/vendor/bundle'

- name: Check if config/{{ item }}.yml exists
  stat:
    path: ../../config/{{ item }}.yml
  connection: local
  sudo: no
  register: configs
  with_items:
    - database
    - secrets
    - social_config

- name: Copy config/{{ item.item }}.yml to {{ shared_path }}/config
  copy: 
    src: ../../../../../config/{{ item.item }}.yml
    dest: '{{ shared_path }}/config/{{ item.item }}.yml'
    owner: '{{ user_name }}'
    group: '{{ group_name }}'
    mode: 0600
  with_items: configs.results
  when: item.stat.exists


- name: Check if db/{{ item }} exists
  stat:
    path: ../../db/{{ app_name }}{{ item }}
  connection: local
  sudo: no
  register: configs
  with_items:
    - '_dump.sql'

- name: Copy db/{{ app_name }}{{ item.item }} to {{ shared_path }}/tmp
  copy: 
    src: ../../../../../db/{{ app_name }}{{ item.item }}
    dest: '{{ shared_path }}/tmp/{{ app_name }}{{ item.item }}'
    owner: '{{ user_name }}'
    group: '{{ group_name }}'
    mode: 0600
  with_items: configs.results
  when: item.stat.exists

- name: Check if public/assets gzip exists
  stat:
    path: ../../public/{{ app_name }}_{{ item }}.tar.gz
  connection: local
  sudo: no
  register: assets
  with_items:
    - ckeditor_assets
    - system

- name: Copy public/{{ app_name }}_{{ item.item }} to {{ shared_path }}/public
  copy: 
    src: ../../../../../public/{{ app_name }}_{{ item.item }}.tar.gz
    dest: '{{ shared_path }}/public/{{ item.item }}.tar.gz'
    owner: '{{ user_name }}'
    group: '{{ group_name }}'
    mode: 0600
  with_items: assets.results
  when: item.stat.exists

- name: Untar {{ shared_path }}/{{ item.item }}
  command: tar -xzf {{ item.item }}.tar.gz chdir={{ shared_path }}/public
  with_items: assets.results
  when: item.stat.exists

- name: Set right permissions for {{ shared_path }}/{{ item.item }}
  file: 
    path: "{{ shared_path }}/public/{{ item.item }}"
    owner: '{{ user_name }}'
    group: '{{ group_name }}'
    mode: 0755
    recurse: yes
  with_items: assets.results
  when: item.stat.exists
